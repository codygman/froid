module froid.opengl.GLSurfaceView where

import froid.content.Context
import froid.opengl.glSurfaceView.Renderer
import froid.view.MotionEvent
import froid.view.View
import froid.Types

data GLSurfaceView = native android.opengl.GLSurfaceView where
    pure native renderModeWhenDirty "android.opengl.GLSurfaceView.RENDERMODE_WHEN_DIRTY" :: Int
    native onPause :: MutableIO GLSurfaceView -> IO ()
    native onResume :: MutableIO GLSurfaceView -> IO ()
    native requestFocus :: MutableIO GLSurfaceView -> IO ()
    native setFocusableInTouchMode :: MutableIO GLSurfaceView -> Bool -> IO ()
    native onTrackballEvent :: MutableIO GLSurfaceView -> MutableIO MotionEvent -> IO Bool
    native onTouchEvent :: MutableIO GLSurfaceView -> MutableIO MotionEvent -> IO Bool
    native setRenderer :: MutableIO GLSurfaceView -> MutableIO GLSurfaceViewRenderer -> IO ()
    native setRenderMode :: MutableIO GLSurfaceView -> Int -> IO ()
    native requestRender :: MutableIO GLSurfaceView -> IO ()
    asView :: MutableIO GLSurfaceView -> IO (MutableIO View)
    asView sv = (toView sv >>= either (\cce -> error $ "Cast failed.") return) :: IO (MutableIO View)

instance ViewSub GLSurfaceView where
    native fromView "(android.opengl.GLSurfaceView)" :: MutableIO View -> IO (ClassCastException | MutableIO GLSurfaceView)

instance IsView GLSurfaceView where
    native toView "(android.view.View)" :: MutableIO GLSurfaceView -> IO (ClassCastException | MutableIO View)

data GLSurfaceViewDelegator = GLSurfaceViewDelegator { onPause          :: Maybe (MutableIO GLSurfaceView -> IO ())
                                                     , onResume         :: Maybe (MutableIO GLSurfaceView -> IO ())
                                                     , onTouchEvent     :: Maybe (MutableIO GLSurfaceView -> MutableIO MotionEvent -> IO Bool)
                                                     , onTrackballEvent :: Maybe (MutableIO GLSurfaceView -> MutableIO MotionEvent -> IO Bool)
                                                     }

defaultGLSurfaceView = GLSurfaceViewDelegator { onPause          = Nothing
                                              , onResume         = Nothing
                                              , onTouchEvent     = Nothing
                                              , onTrackballEvent = Nothing
                                              }

native mkGLSurfaceView "froid.opengl.GLSurfaceView.delegate" :: MutableIO Context -> GLSurfaceViewDelegator -> STMutable RealWorld GLSurfaceView

native module where {
    public static android.opengl.GLSurfaceView delegate(android.content.Context context, TGLSurfaceViewDelegator delegator) {
        FregeGLSurfaceView glsv = new FregeGLSurfaceView(context);
        glsv.delegator = delegator;
        return (android.opengl.GLSurfaceView) glsv;
    }


    public static class FregeGLSurfaceView extends android.opengl.GLSurfaceView {

        TGLSurfaceViewDelegator delegator = null;

        public FregeGLSurfaceView(android.content.Context context) {
            super(context);
        }

        @Override
        public boolean onTrackballEvent(android.view.MotionEvent e) {
            frege.prelude.PreludeBase.TMaybe<
                Func.U<android.opengl.GLSurfaceView, Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>
            > onTrackballEventDelegator = TGLSurfaceViewDelegator.onTrackballEvent(delegator);
            PreludeBase.TMaybe.DJust<
                Func.U<android.opengl.GLSurfaceView, Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>
            > justDelegator = onTrackballEventDelegator.asJust();
            if (justDelegator == null) return false;
            Func.U<android.opengl.GLSurfaceView, Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>
                ote = (Func.U<android.opengl.GLSurfaceView, Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>) justDelegator.mem1.call();
            Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>
                appliedThis = RunTM.<Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>
                    cast(ote.apply(Thunk.lazy((android.opengl.GLSurfaceView) this)).call()).call();
            Func.U<Object, Boolean> res = RunTM.<Func.U<Object, Boolean>>cast(appliedThis.apply(Thunk.lazy(e)).call()).call();
            boolean ret = ((Boolean)PreludeBase.TST.run(res).call()).booleanValue();
            System.runFinalization();
            System.gc();
            return ret;
        }

        @Override
        public boolean onTouchEvent(android.view.MotionEvent e) {
            frege.prelude.PreludeBase.TMaybe<
                Func.U<android.opengl.GLSurfaceView, Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>
            > onTouchEventDelegator = TGLSurfaceViewDelegator.onTouchEvent(delegator);
            PreludeBase.TMaybe.DJust<
                Func.U<android.opengl.GLSurfaceView, Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>
            > justDelegator = onTouchEventDelegator.asJust();
            if (justDelegator == null) return false;
            Func.U<android.opengl.GLSurfaceView, Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>
                ote = (Func.U<android.opengl.GLSurfaceView, Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>) justDelegator.mem1.call();
            Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>
                appliedThis = RunTM.<Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>
                    cast(ote.apply(Thunk.lazy((android.opengl.GLSurfaceView) this)).call()).call();
            Func.U<Object, Boolean> res = RunTM.<Func.U<Object, Boolean>>cast(appliedThis.apply(Thunk.lazy(e)).call()).call();
            boolean ret = ((Boolean)PreludeBase.TST.run(res).call()).booleanValue();
            System.runFinalization();
            System.gc();
            return ret;
        }

        @Override
        public void onResume() {
            super.onResume();
            frege.prelude.PreludeBase.TMaybe<
                Func.U<android.opengl.GLSurfaceView, Func.U<RealWorld, Short>>
            > onResumeDelegator = TGLSurfaceViewDelegator.onResume(delegator);
            PreludeBase.TMaybe.DJust<
                Func.U<android.opengl.GLSurfaceView, Func.U<RealWorld, Short>>
            > justDelegator = onResumeDelegator.asJust();
            if (justDelegator == null) return;
            Func.U<android.opengl.GLSurfaceView, Func.U<RealWorld, Short>>
                or = (Func.U<android.opengl.GLSurfaceView, Func.U<RealWorld, Short>>) justDelegator.mem1.call();
            Func.U<Object, Short> res = RunTM.<Func.U<Object, Short>>cast(or.apply(Thunk.lazy((android.opengl.GLSurfaceView) this)).call()).call();
            PreludeBase.TST.run(res).call();
        }

        @Override
        public void onPause() {
            super.onPause();
            frege.prelude.PreludeBase.TMaybe<
                Func.U<android.opengl.GLSurfaceView, Func.U<RealWorld, Short>>
            > onPauseDelegator = TGLSurfaceViewDelegator.onPause(delegator);
            PreludeBase.TMaybe.DJust<
                Func.U<android.opengl.GLSurfaceView, Func.U<RealWorld, Short>>
            > justDelegator = onPauseDelegator.asJust();
            if (justDelegator == null) return;
            Func.U<android.opengl.GLSurfaceView, Func.U<RealWorld, Short>>
                op = (Func.U<android.opengl.GLSurfaceView, Func.U<RealWorld, Short>>) justDelegator.mem1.call();
            Func.U<Object, Short> res = RunTM.<Func.U<Object, Short>>cast(op.apply(Thunk.lazy((android.opengl.GLSurfaceView) this)).call()).call();
            PreludeBase.TST.run(res).call();
        }
    }
}