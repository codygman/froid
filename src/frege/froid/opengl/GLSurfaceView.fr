{-
    Copyright 2016-2017 Michael Chavinda
    This file is part of froid.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
-}

module froid.opengl.GLSurfaceView where

import froid.content.Context
import froid.opengl.glSurfaceView.Delegator
import froid.opengl.glSurfaceView.Renderer
import froid.view.MotionEvent
import froid.view.View
import froid.Types

data GLSurfaceView = mutable native android.opengl.GLSurfaceView where
    defaultDelegator = Delegator { onPause          = Nothing
                                 , onResume         = Nothing
                                 , onTouchEvent     = Nothing
                                 , onTrackballEvent = Nothing
                                 }
    native mk "froid.opengl.GLSurfaceView.delegate" :: Context -> Delegator GLSurfaceView -> IO GLSurfaceView
    pure native renderModeWhenDirty "android.opengl.GLSurfaceView.RENDERMODE_WHEN_DIRTY" :: Int
    native onPause :: GLSurfaceView -> IO ()
    native onResume :: GLSurfaceView -> IO ()
    native requestFocus :: GLSurfaceView -> IO ()
    native setFocusableInTouchMode :: GLSurfaceView -> Bool -> IO ()
    native onTrackballEvent :: GLSurfaceView -> MotionEvent -> IO Bool
    native onTouchEvent :: GLSurfaceView -> MotionEvent -> IO Bool
    native setRenderer :: GLSurfaceView -> GLSurfaceViewRenderer -> IO ()
    native setRenderMode :: GLSurfaceView -> Int -> IO ()
    native requestRender :: GLSurfaceView -> IO ()
    toView :: GLSurfaceView -> IO View
    toView sv = (toView' sv >>= either (\cce -> error $ "Cast failed.") return) :: IO (View)

instance ViewSub GLSurfaceView where
    native fromView' "(android.opengl.GLSurfaceView)" :: View -> IO (ClassCastException | GLSurfaceView)

instance IsView GLSurfaceView where
    native toView' "(android.view.View)" :: GLSurfaceView -> IO (ClassCastException | View)

native module where {
    public static android.opengl.GLSurfaceView delegate(android.content.Context context, Delegator.TDelegator delegator) {
        FregeGLSurfaceView glsv = new FregeGLSurfaceView(context);
        glsv.delegator = delegator;
        return (android.opengl.GLSurfaceView) glsv;
    }


    public static class FregeGLSurfaceView extends android.opengl.GLSurfaceView {

        Delegator.TDelegator delegator = null;

        public FregeGLSurfaceView(android.content.Context context) {
            super(context);
        }
        /*
        @Override
        public boolean onTrackballEvent(android.view.MotionEvent e) {
            PreludeBase.TMaybe<
                Func.U<android.opengl.GLSurfaceView, Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>
            > onTrackballEventDelegator = TDelegator.onTrackballEvent(delegator);
            PreludeBase.TMaybe.DJust<
                Func.U<android.opengl.GLSurfaceView, Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>
            > justDelegator = onTrackballEventDelegator.asJust();
            if (justDelegator == null) return false;
            Func.U<android.opengl.GLSurfaceView, Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>
                ote = (Func.U<android.opengl.GLSurfaceView, Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>) justDelegator.mem1.call();
            Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>
                appliedThis = RunTM.<Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>
                    cast(ote.apply(Thunk.lazy((android.opengl.GLSurfaceView) this)).call()).call();
            Func.U<Object, Boolean> res = RunTM.<Func.U<Object, Boolean>>cast(appliedThis.apply(Thunk.lazy(e)).call()).call();
            return ((Boolean)PreludeBase.TST.run(res).call()).booleanValue();
        }

        @Override
        public boolean onTouchEvent(android.view.MotionEvent e) {
            PreludeBase.TMaybe<
                Func.U<android.opengl.GLSurfaceView, Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>
            > onTouchEventDelegator = TDelegator.onTouchEvent(delegator);
            PreludeBase.TMaybe.DJust<
                Func.U<android.opengl.GLSurfaceView, Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>
            > justDelegator = onTouchEventDelegator.asJust();
            if (justDelegator == null) return false;
            Func.U<android.opengl.GLSurfaceView, Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>
                ote = (Func.U<android.opengl.GLSurfaceView, Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>) justDelegator.mem1.call();
            Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>
                appliedThis = RunTM.<Func.U<android.view.MotionEvent, Func.U<RealWorld, Boolean>>>
                    cast(ote.apply(Thunk.lazy((android.opengl.GLSurfaceView) this)).call()).call();
            Func.U<Object, Boolean> res = RunTM.<Func.U<Object, Boolean>>cast(appliedThis.apply(Thunk.lazy(e)).call()).call();
            return ((Boolean)PreludeBase.TST.run(res).call()).booleanValue();
        }

        @Override
        public void onResume() {
            super.onResume();
            PreludeBase.TMaybe<
                Func.U<android.opengl.GLSurfaceView, Func.U<RealWorld, Short>>
            > onResumeDelegator = TDelegator.onResume(delegator);
            PreludeBase.TMaybe.DJust<
                Func.U<android.opengl.GLSurfaceView, Func.U<RealWorld, Short>>
            > justDelegator = onResumeDelegator.asJust();
            if (justDelegator == null) return;
            Func.U<android.opengl.GLSurfaceView, Func.U<RealWorld, Short>>
                or = (Func.U<android.opengl.GLSurfaceView, Func.U<RealWorld, Short>>) justDelegator.mem1.call();
            Func.U<Object, Short> res = RunTM.<Func.U<Object, Short>>cast(or.apply(Thunk.lazy((android.opengl.GLSurfaceView) this)).call()).call();
            PreludeBase.TST.run(res).call();
        }

        @Override
        public void onPause() {
            super.onPause();
            PreludeBase.TMaybe<
                Func.U<android.opengl.GLSurfaceView, Func.U<RealWorld, Short>>
            > onPauseDelegator = TDelegator.onPause(delegator);
            PreludeBase.TMaybe.DJust<
                Func.U<android.opengl.GLSurfaceView, Func.U<RealWorld, Short>>
            > justDelegator = onPauseDelegator.asJust();
            if (justDelegator == null) return;
            Func.U<android.opengl.GLSurfaceView, Func.U<RealWorld, Short>>
                op = (Func.U<android.opengl.GLSurfaceView, Func.U<RealWorld, Short>>) justDelegator.mem1.call();
            Func.U<Object, Short> res = RunTM.<Func.U<Object, Short>>cast(op.apply(Thunk.lazy((android.opengl.GLSurfaceView) this)).call()).call();
            PreludeBase.TST.run(res).call();
        }
        */
    }
}