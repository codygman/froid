{-
    Copyright 2016-2017 Michael Chavinda
    This file is part of froid.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
-}

module froid.view.View where

data View = mutable native android.view.View where
    pure native focusDown "android.view.View.FOCUS_DOWN" :: Int
    pure native visible "android.view.View.VISIBLE" :: Int
    pure native invisible "android.view.View.INVISIBLE" :: Int
    native findViewById :: View -> Int -> IO View
    native setOnClickListener :: View -> OnClickListener -> IO ()
    native setVisibility :: View -> Int -> IO ()
    onClick :: View -> (View -> IO ()) -> IO ()
    onClick v handler = do
                  listener <- onClick' handler
                  v.setOnClickListener listener


protected data OnClickListener = mutable native android.view.View.OnClickListener

native onClick' "froid.view.View.onClickHandler" :: (View -> IO ()) -> IO OnClickListener

native module where {
    public static android.view.View.OnClickListener
        onClickHandler(final Func.U<android.view.View, Func.U<RealWorld,Short>> lambda) {
        return new android.view.View.OnClickListener() {
            @Override
            public void onClick(android.view.View view) {
                try {
                    PreludeBase.TST.performUnsafe(
                        lambda.apply(Thunk.lazy(view)).call()).call();
                } catch(RuntimeException re) {
                    re.printStackTrace();
                    throw re;
                }
            }
        };
    }
}
