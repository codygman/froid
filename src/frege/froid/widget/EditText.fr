module froid.widget.EditText where

import froid.content.Context
import froid.text.TextWatcher
import froid.view.View
import froid.Types

data EditText = native android.widget.EditText where
    native new :: MutableIO Context -> STMutable RealWorld EditText
    native addTextChangedListener :: MutableIO EditText -> MutableIO TextWatcher -> IO ()
    native setText :: MutableIO EditText -> String -> IO ()
    native getText :: MutableIO EditText -> IO CharSequence
    native getVisibility :: MutableIO EditText -> IO Int
    native setVisibility :: MutableIO EditText -> Int -> IO ()

getTextString :: MutableIO EditText -> IO String
getTextString tv = liftM (\s -> s.toString) tv.getText

asEditText :: (Int -> IO (MutableIO View)) -> Int -> IO (MutableIO EditText)
asEditText find res = do
    v <- find res
    (fromView v >>= either (\cce -> error $ "Cast failed.") return) :: IO (MutableIO EditText)

setOnEditTextChanged :: MutableIO EditText -> TextWatcherDelegator -> IO ()
setOnEditTextChanged e del = do
    listener <- onTextChanged del
    e.addTextChangedListener listener

instance ViewSub EditText where
    native fromView "(android.widget.EditText)" :: MutableIO View -> IO (ClassCastException | MutableIO EditText)

instance IsView EditText where
    native toView "(android.view.View)" :: MutableIO EditText -> IO (ClassCastException | MutableIO View)
