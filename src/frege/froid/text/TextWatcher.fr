{-
    Copyright 2016-2017 Michael Chavinda
    This file is part of froid.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
-}

module froid.text.TextWatcher where

import froid.text.Editable

data TextWatcher = mutable native android.text.TextWatcher where
    defaultDelegator = TextWatcher.Delegator { beforeTextChanged = Nothing, onTextChanged = Nothing, afterTextChanged = Nothing }
    native onTextChanged "froid.text.TextWatcher.textChangedHandler" :: Delegator -> IO (TextWatcher)

data Delegator = Delegator { beforeTextChanged :: Maybe (CharSequence -> Int -> Int -> Int -> IO ())
                           , onTextChanged :: Maybe (CharSequence -> Int -> Int -> Int -> IO ())
                           , afterTextChanged :: Maybe (Editable -> IO ())
                           }

native module where {
    public static android.text.TextWatcher
        textChangedHandler(final TDelegator del) {
        return new android.text.TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                try {
                    if (TDelegator.beforeTextChanged(del).asJust() != null)
                        PreludeBase.TST.performUnsafe(
                            TDelegator.beforeTextChanged(del).asJust().mem1.call()
                            .apply(Thunk.<CharSequence>lazy(s)).call()
                            .apply(Thunk.<Integer>lazy(start)).call()
                            .apply(Thunk.<Integer>lazy(count)).call()
                            .apply(Thunk.<Integer>lazy(after)).call()).call();

                } catch(RuntimeException re) {
                    re.printStackTrace();
                    throw re;
                }
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                try {
                    if (TDelegator.onTextChanged(del).asJust() != null)
                        PreludeBase.TST.performUnsafe(
                            TDelegator.onTextChanged(del).asJust().mem1.call()
                            .apply(Thunk.<CharSequence>lazy(s)).call()
                            .apply(Thunk.<Integer>lazy(start)).call()
                            .apply(Thunk.<Integer>lazy(before)).call()
                            .apply(Thunk.<Integer>lazy(count)).call()).call();
                } catch(RuntimeException re) {
                    re.printStackTrace();
                    throw re;
                }
            }

            @Override
            public void afterTextChanged(android.text.Editable s) {
                try {
                    if (TDelegator.afterTextChanged(del).asJust() != null)
                        PreludeBase.TST.performUnsafe(
                            TDelegator.afterTextChanged(del).asJust().mem1.call()
                            .apply(Thunk.<android.text.Editable>lazy(s)).call()).call();
                } catch(RuntimeException re) {
                    re.printStackTrace();
                    throw re;
                }
            }
        };
    }
}
