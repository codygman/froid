{-
    Copyright 2016-2017 Michael Chavinda
    This file is part of froid.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
-}

module froid.animation.Animator where

data Animator = mutable native android.animation.Animator where
    private native addListener :: Animator -> AnimatorListenerAdapter -> IO ()
    native start :: Animator -> IO ()
    private native onAnimationEnd' "froid.animation.Animator.onAnimationEndHandler" :: (Animator -> IO ()) -> IO AnimatorListenerAdapter
    onAnimationEnd :: Animator -> (Animator -> IO ()) -> IO ()
    onAnimationEnd animation lambda = do
        listener <- Animator.onAnimationEnd' lambda
        animation.addListener listener

data AnimatorListenerAdapter = mutable native android.animation.AnimatorListenerAdapter


native module where {
    public static android.animation.AnimatorListenerAdapter 
    onAnimationEndHandler(final Func.U<android.animation.Animator, Func.U<RealWorld,Short>> lambda) {
        return (new android.animation.AnimatorListenerAdapter() {
            @Override
            public void onAnimationEnd(android.animation.Animator animation) {
                super.onAnimationEnd(animation);
                try {
                    PreludeBase.TST.performUnsafe(
                        lambda.apply(Thunk.lazy(animation)).call()).call();
                } catch(RuntimeException re) {
                    re.printStackTrace();
                    throw re;
                }
            }
        });
    }
}